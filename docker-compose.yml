version: '3.8'

services:

  eureka-server:
    build: ./eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend
    restart: unless-stopped

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    networks:
      - backend
    restart: unless-stopped

  order-service:
    build: ./order-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - order-db
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  order-db:
    image: postgres:16
    container_name: order-db
    restart: always
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5432"
    networks:
      - backend
    volumes:
      - order_data:/var/lib/postgresql/data

  employee-service:
    build: ./employee-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
    networks:
      - backend
    restart: unless-stopped

  inventory-service:
    build: ./inventory-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
    networks:
      - backend
    restart: unless-stopped

  product-service:
    build: ./product-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
    networks:
      - backend
    restart: unless-stopped

  auth-service:
    build: ./auth-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - auth-db
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:5432/auth_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  auth-db:
    image: postgres:16
    container_name: auth-db
    restart: always
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5434:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - backend

  user-service:
    build: ./user-service
    ports:
      - "8086:8086"
    depends_on:
      - eureka-server
      - user-db
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  user-db:
    image: postgres:16
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5435:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - backend

  # New services
  tracking-service:
    build: ./tracking-service
    ports:
      - "8087:8087"
    depends_on:
      - eureka-server
      - tracking-db
      - redis
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://tracking-db:5432/tracking_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  tracking-db:
    image: postgres:16
    container_name: tracking-db
    restart: always
    environment:
      POSTGRES_DB: tracking_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5436:5432"
    volumes:
      - tracking_data:/var/lib/postgresql/data
    networks:
      - backend

  driver-service:
    build: ./driver-service
    ports:
      - "8088:8088"
    depends_on:
      - eureka-server
      - driver-db
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://driver-db:5432/driver_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  driver-db:
    image: postgres:16
    container_name: driver-db
    restart: always
    environment:
      POSTGRES_DB: driver_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5437:5432"
    volumes:
      - driver_data:/var/lib/postgresql/data
    networks:
      - backend

  # Infrastructure services
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    command: redis-server --appendonly yes

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - backend

networks:
  backend:

volumes:
  order_data:
  auth_data:
  user_data:
  tracking_data:
  driver_data:
